/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * traceability-tutor
 */
import {
  HttpClient
} from '@angular/common/http'
import type {
  HttpContext,
  HttpHeaders,
  HttpParams
} from '@angular/common/http'
import {
  Injectable
} from '@angular/core'
import {
  Observable
} from 'rxjs'
import type {
  CreateIterationRequest,
  IterationDTO
} from '../model'



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class IterationResourceService {
  constructor(
    private http: HttpClient,
  ) {} getIteration<TData = IterationDTO>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/api/iterations/${id}`,options
    );
  }
 updateIteration<TData = number>(
    id: number,
    iterationDTO: IterationDTO, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `/api/iterations/${id}`,
      iterationDTO,options
    );
  }
 deleteIteration<TData = void>(
    id: number, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `/api/iterations/${id}`,options
    );
  }
 getAllIterations<TData = IterationDTO[]>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/api/iterations`,options
    );
  }
 createIteration<TData = IterationDTO>(
    createIterationRequest: CreateIterationRequest, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/api/iterations`,
      createIterationRequest,options
    );
  }
};

export type GetIterationClientResult = NonNullable<IterationDTO>
export type UpdateIterationClientResult = NonNullable<number>
export type DeleteIterationClientResult = NonNullable<void>
export type GetAllIterationsClientResult = NonNullable<IterationDTO[]>
export type CreateIterationClientResult = NonNullable<IterationDTO>
